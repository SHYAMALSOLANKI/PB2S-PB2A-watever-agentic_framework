{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/agentic-gpt-steps.schema.json",
  "title": "Agentic GPT Setup Steps",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "version": {
      "type": "string",
      "description": "Semantic version of this steps specification."
    },
    "steps": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#/$defs/step" }
    }
  },
  "required": ["version", "steps"],
  "$defs": {
    "step": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^step-[a-z0-9-]+$",
          "description": "Stable identifier, e.g., step-1-agentic-window."
        },
        "title": { "type": "string" },
        "goal": { "type": "string" },
        "actions": { "type": "array", "items": { "type": "string" } },
        "constraints": { "type": "array", "items": { "type": "string" } },
        "runtime": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "isolation": { "type": "string", "enum": ["container", "vm"] },
            "network_policy": {
              "type": "string",
              "enum": ["airgapped", "egress-restricted", "unrestricted"]
            },
            "mounts": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["isolation"]
        },
        "llm_backend": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "provider": {
              "type": "string",
              "enum": ["llama.cpp", "Ollama", "GPT4All", "vLLM"]
            },
            "model": { "type": "string" },
            "parameters": { "type": "object" }
          },
          "required": ["provider", "model"]
        },
        "suit_logic": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "wrapping_mode": {
              "type": "string",
              "const": "outside-llm",
              "description": "Suit logic wraps around the LLM, not inside."
            },
            "input_validation": { "type": "array", "items": { "type": "string" } },
            "output_validation": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["wrapping_mode"]
        },
        "io_controls": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "prompt_channels": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["system", "developer", "user", "tools"]
              }
            },
            "logging": { "type": "string", "enum": ["none", "local", "remote-redacted"] },
            "redaction": { "type": "array", "items": { "type": "string" } }
          }
        },
        "middleware": { "$ref": "#/$defs/middleware" },
        "verification": { "type": "array", "items": { "type": "string" } }
      },
      "required": ["id", "title", "goal", "actions", "constraints"]
    },
    "middleware": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "language": { "type": "string", "const": "python" },
        "entrypoint": { "type": "string", "description": "Module:function or script path." },
        "flow": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ingress_intercept",
              "enforce_pb2s",
              "schema_validate",
              "auto_repeat_on_fail",
              "egress_gate"
            ]
          },
          "uniqueItems": true
        },
        "pb2s_enforcement": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "required_sections": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["DRAFT", "REFLECT", "REVISE", "LEARNED"]
              },
              "minItems": 4,
              "maxItems": 4
            },
            "max_cycles": { "type": "integer", "minimum": 1, "default": 5 }
          },
          "required": ["required_sections"]
        },
        "validation_schema": {
          "type": "object",
          "description": "JSON Schema used to validate PB2S cycle outputs."
        },
        "validation_report": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "validation_passed": { "type": "boolean" },
            "noise_log": { "type": "array", "items": { "type": "string" } },
            "responsibility": {
              "type": "string",
              "enum": ["suit", "llm", "tooling", "user"]
            }
          },
          "required": ["validation_passed", "noise_log", "responsibility"]
        },
        "retry_policy": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "mode": { "type": "string", "enum": ["fixed", "exponential"] },
            "max_retries": { "type": "integer", "minimum": 0, "default": 3 },
            "backoff_ms": { "type": "integer", "minimum": 0, "default": 250 }
          }
        },
        "audit": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "capture_all_cycles": { "type": "boolean", "const": true },
            "persist_location": { "type": "string" },
            "redact_fields": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["capture_all_cycles"]
        },
        "egress_gate": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "return_only_on_pass": { "type": "boolean", "const": true },
            "allowed_channels": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["user", "tools", "log"]
              }
            }
          },
          "required": ["return_only_on_pass"]
        }
      },
      "required": ["language", "flow", "pb2s_enforcement", "validation_report", "egress_gate"]
    }
  },
  "examples": [
    {
      "version": "1.1.0",
      "steps": [
        {
          "id": "step-1-agentic-window",
          "title": "Define the Agentic Window",
          "goal": "Provision an isolated execution environment for prompts, suit configs, and PB2S cycles.",
          "actions": [
            "Provision a dedicated container or VM.",
            "Restrict network egress according to policy.",
            "Mount only explicitly approved volumes.",
            "Install and configure an open-source LLM runtime.",
            "Set up suit logic as an external wrapper controlling I/O."
          ],
          "constraints": [
            "All execution occurs inside the Agentic Window.",
            "Use only open-source LLM backends (llama.cpp, Ollama, GPT4All, vLLM).",
            "Suit logic must wrap around the LLM (outside-llm) and own input/output validation.",
            "No calls to closed endpoints."
          ],
          "runtime": {
            "isolation": "container",
            "network_policy": "egress-restricted",
            "mounts": ["./prompts", "./suit-config", "./logs"]
          },
          "llm_backend": {
            "provider": "Ollama",
            "model": "llama3:8b-instruct",
            "parameters": { "temperature": 0.2, "top_p": 0.9, "max_tokens": 2048 }
          },
          "suit_logic": {
            "wrapping_mode": "outside-llm",
            "input_validation": [
              "Reject prompts exceeding token budget.",
              "Strip secrets and PII according to redaction rules."
            ],
            "output_validation": [
              "Parse to expected schema where applicable.",
              "Reject/tool-correct outputs that fail validators."
            ]
          },
          "io_controls": {
            "prompt_channels": ["system", "developer", "user", "tools"],
            "logging": "local",
            "redaction": ["api_key", "password", "private_key"]
          },
          "verification": [
            "LLM reachable only from inside the Agentic Window.",
            "Network policy test confirms blocked external endpoints.",
            "Validators reject malformed I/O in negative tests."
          ]
        },
        {
          "id": "step-2-suit-middleware",
          "title": "Implement Suit as Middleware",
          "goal": "Insert a Python middleware that filters all traffic between user and model, enforcing PB2S and schema validation.",
          "actions": [
            "Build the suit engine in Python.",
            "Intercept user requests before the LLM call.",
            "Run PB2S cycle: DRAFT → REFLECT → REVISE → LEARNED.",
            "Validate cycle output against the JSON schema.",
            "If validation fails, repeat PB2S automatically until pass or retry budget reached.",
            "Gate egress so only validated outputs are returned."
          ],
          "constraints": [
            "Middleware must run inside the Agentic Window.",
            "LLM cannot emit unfiltered outputs to user.",
            "All cycles are captured, audited, and filtered.",
            "Validation report includes: validation_passed, noise_log, responsibility."
          ],
          "middleware": {
            "language": "python",
            "entrypoint": "suit.middleware:handle_request",
            "flow": [
              "ingress_intercept",
              "enforce_pb2s",
              "schema_validate",
              "auto_repeat_on_fail",
              "egress_gate"
            ],
            "pb2s_enforcement": {
              "required_sections": ["DRAFT", "REFLECT", "REVISE", "LEARNED"],
              "max_cycles": 5
            },
            "validation_schema": {
              "$comment": "Embed or reference your PB2S output schema here."
            },
            "validation_report": {
              "validation_passed": false,
              "noise_log": [],
              "responsibility": "suit"
            },
            "retry_policy": {
              "mode": "exponential",
              "max_retries": 3,
              "backoff_ms": 250
            },
            "audit": {
              "capture_all_cycles": true,
              "persist_location": "./logs/pb2s/",
              "redact_fields": ["api_key", "password", "private_key"]
            },
            "egress_gate": {
              "return_only_on_pass": true,
              "allowed_channels": ["user", "log"]
            }
          },
          "verification": [
            "Unvalidated outputs never reach the user channel.",
            "Failing validation triggers automatic PB2S re-run.",
            "Audit log contains all PB2S cycles with redactions applied."
          ]
        }
      ]
    }
  ]
}
