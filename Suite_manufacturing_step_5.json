{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://example.com/agentic-gpt-steps.schema.json",
  "title": "Agentic GPT Setup Steps",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "version": { "type": "string" },
    "steps": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#/$defs/step" }
    },
    "changelog": {
      "type": "array",
      "items": { "$ref": "#/$defs/changelog_entry" }
    }
  },
  "required": ["version", "steps"],
  "$defs": {
    "pb2s_cycle_schema": {
      "type": "object",
      "properties": {
        "cycle": { "type": "integer" },
        "DRAFT": { "type": "string" },
        "REFLECT": { "type": "array", "items": { "type": "string" } },
        "REVISE": { "type": "string" },
        "LEARNED": { "type": "string" },
        "noise_log": { "type": "array", "items": { "type": "string" } },
        "responsibility": { "type": "string" },
        "validation_passed": { "type": "boolean" },
        "timestamp": { "type": "string", "format": "date-time" },
        "version": { "type": "string" }
      },
      "required": [
        "cycle","DRAFT","REFLECT","REVISE","LEARNED",
        "noise_log","responsibility","validation_passed",
        "timestamp","version"
      ],
      "additionalProperties": false
    },
    "service": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string" },
        "type": { "type": "string", "enum": ["llm-backend", "suit-engine", "database"] },
        "image": { "type": "string" },
        "command": { "type": "array", "items": { "type": "string" } },
        "env": { "type": "object", "additionalProperties": { "type": "string" } },
        "ports": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "host": { "type": "string", "pattern": "^127\\.0\\.0\\.1(:\\d+)?$" },
              "container": { "type": "integer", "minimum": 1, "maximum": 65535 }
            },
            "required": ["container"]
          }
        },
        "volumes": { "type": "array", "items": { "type": "string" } },
        "depends_on": { "type": "array", "items": { "type": "string" } }
      },
      "required": ["name", "type"]
    },
    "sandbox": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "orchestrator": { "type": "string", "enum": ["docker", "podman"] },
        "expose_only_local_api": { "type": "boolean", "const": true },
        "network_mode": { "type": "string", "enum": ["bridge", "host", "none"], "default": "bridge" },
        "services": { "type": "array", "minItems": 2, "items": { "$ref": "#/$defs/service" } },
        "database": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": { "type": "boolean", "default": false },
            "engine": { "type": "string", "enum": ["sqlite", "postgres"] },
            "dsn": { "type": "string" }
          }
        },
        "policy": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "force_suit_path": { "type": "boolean", "const": true },
            "deny_external_egress": { "type": "boolean", "default": true }
          },
          "required": ["force_suit_path"]
        }
      },
      "required": ["orchestrator", "expose_only_local_api", "services", "policy"]
    },
    "middleware": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "language": { "type": "string", "const": "python" },
        "entrypoint": { "type": "string" },
        "flow": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ingress_intercept",
              "enforce_pb2s",
              "schema_validate",
              "auto_repeat_on_fail",
              "egress_gate"
            ]
          },
          "uniqueItems": true
        },
        "pb2s_enforcement": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "required_sections": {
              "type": "array",
              "items": { "type": "string", "enum": ["DRAFT", "REFLECT", "REVISE", "LEARNED"] },
              "minItems": 4,
              "maxItems": 4
            },
            "max_cycles": { "type": "integer", "minimum": 1, "default": 5 }
          },
          "required": ["required_sections"]
        },
        "validation_schema": {
          "oneOf": [{ "$ref": "#/$defs/pb2s_cycle_schema" }, { "type": "object" }]
        },
        "validation_report": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "validation_passed": { "type": "boolean" },
            "noise_log": { "type": "array", "items": { "type": "string" } },
            "responsibility": { "type": "string", "enum": ["suit", "llm", "tooling", "user"] }
          },
          "required": ["validation_passed", "noise_log", "responsibility"]
        },
        "retry_policy": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "mode": { "type": "string", "enum": ["fixed", "exponential"] },
            "max_retries": { "type": "integer", "minimum": 0, "default": 3 },
            "backoff_ms": { "type": "integer", "minimum": 0, "default": 250 }
          }
        },
        "audit": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "capture_all_cycles": { "type": "boolean", "const": true },
            "persist_location": { "type": "string" },
            "redact_fields": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["capture_all_cycles"]
        },
        "egress_gate": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "return_only_on_pass": { "type": "boolean", "const": true },
            "allowed_channels": {
              "type": "array",
              "items": { "type": "string", "enum": ["user", "log", "tools"] }
            }
          },
          "required": ["return_only_on_pass"]
        },
        "adaptation": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": { "type": "boolean", "const": true },
            "sources": {
              "type": "array",
              "items": { "type": "string", "enum": ["schema", "validator", "pb2s_process"] },
              "minItems": 1
            },
            "contradiction_detection": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "signals": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["schema_fail", "ambiguity_flag", "tool_error", "operator_feedback"]
                  }
                },
                "on_detect": {
                  "type": "string",
                  "enum": ["add_rule", "tighten_rule", "open_issue", "rollback"]
                }
              },
              "required": ["signals", "on_detect"]
            },
            "rule_updates": {
              "type": "array",
              "items": { "$ref": "#/$defs/rule_change" }
            },
            "noise_learning": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "ingest_noise_log": { "type": "boolean", "const": true },
                "threshold": { "type": "integer", "minimum": 1, "default": 3 },
                "action": { "type": "string", "enum": ["propose_rule", "auto_rule"] }
              },
              "required": ["ingest_noise_log", "action"]
            },
            "changelog_ref": { "type": "string", "description": "Pointer to top-level changelog." },
            "rollback": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "enabled": { "type": "boolean", "default": true },
                "strategy": { "type": "string", "enum": ["last_good", "version_pin"] }
              }
            }
          },
          "required": ["enabled", "sources", "contradiction_detection", "noise_learning"]
        }
      },
      "required": ["language", "flow", "pb2s_enforcement", "validation_report", "egress_gate", "adaptation"]
    },
    "rule_change": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": { "type": "string" },
        "applies_to": { "type": "string", "enum": ["schema", "validator", "pb2s_process"] },
        "change_type": { "type": "string", "enum": ["add", "modify", "remove"] },
        "description": { "type": "string" },
        "created_at": { "type": "string", "format": "date-time" },
        "created_by": { "type": "string", "enum": ["suit", "operator"] },
        "diff": { "type": "object" },
        "version_after": { "type": "string" }
      },
      "required": ["id", "applies_to", "change_type", "description", "created_at", "created_by", "version_after"]
    },
    "changelog_entry": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "version": { "type": "string" },
        "timestamp": { "type": "string", "format": "date-time" },
        "reason": { "type": "string" },
        "rules": { "type": "array", "items": { "$ref": "#/$defs/rule_change" } }
      },
      "required": ["version", "timestamp"]
    },
    "step": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": { "type": "string", "pattern": "^step-[a-z0-9-]+$" },
        "title": { "type": "string" },
        "goal": { "type": "string" },
        "actions": { "type": "array", "items": { "type": "string" } },
        "constraints": { "type": "array", "items": { "type": "string" } },
        "runtime": { "$ref": "#/$defs/sandbox" },
        "llm_backend": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "provider": { "type": "string", "enum": ["llama.cpp", "Ollama", "GPT4All", "vLLM"] },
            "model": { "type": "string" },
            "parameters": { "type": "object" }
          },
          "required": ["provider", "model"]
        },
        "suit_logic": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "wrapping_mode": { "type": "string", "const": "outside-llm" },
            "input_validation": { "type": "array", "items": { "type": "string" } },
            "output_validation": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["wrapping_mode"]
        },
        "io_controls": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "prompt_channels": {
              "type": "array",
              "items": { "type": "string", "enum": ["system", "developer", "user", "tools"] }
            },
            "logging": { "type": "string", "enum": ["none", "local", "remote-redacted"] },
            "redaction": { "type": "array", "items": { "type": "string" } }
          }
        },
        "middleware": { "$ref": "#/$defs/middleware" },
        "verification": { "type": "array", "items": { "type": "string" } }
      },
      "required": ["id", "title", "goal", "actions", "constraints"]
    }
  },
  "examples": [
    {
      "version": "1.4.0",
      "changelog": [],
      "steps": [
        { "id": "step-1-agentic-window", "title": "Define the Agentic Window", "goal": "Provision an isolated environment for prompts, suit configs, and PB2S cycles.", "actions": ["Provision container/VM","Restrict egress","Mount approved volumes","Install open-source LLM","Wrap LLM with external suit"], "constraints": ["Execution stays inside Agentic Window","Open-source LLM backends only","Suit owns I/O validation","No closed endpoints"] },
        { "id": "step-2-suit-middleware", "title": "Implement Suit as Middleware", "goal": "Python middleware filtering all user↔model traffic; enforce PB2S + schema.", "actions": ["Intercept requests","Run PB2S","Validate against schema","Auto-repeat on fail","Gate egress"], "constraints": ["Run inside Agentic Window","No raw LLM outputs to user","Capture/audit all cycles"], "middleware": { "language": "python", "entrypoint": "suit.middleware:handle_request", "flow": ["ingress_intercept","enforce_pb2s","schema_validate","auto_repeat_on_fail","egress_gate"], "pb2s_enforcement": { "required_sections": ["DRAFT","REFLECT","REVISE","LEARNED"], "max_cycles": 5 }, "validation_schema": { "$ref": "#/$defs/pb2s_cycle_schema" }, "validation_report": { "validation_passed": false, "noise_log": [], "responsibility": "suit" }, "retry_policy": { "mode": "exponential", "max_retries": 3, "backoff_ms": 250 }, "audit": { "capture_all_cycles": true, "persist_location": "./logs/pb2s/", "redact_fields": ["api_key","password","private_key"] }, "egress_gate": { "return_only_on_pass": true, "allowed_channels": ["user","log"] }, "adaptation": { "enabled": true, "sources": ["schema","validator","pb2s_process"], "contradiction_detection": { "signals": ["schema_fail","ambiguity_flag","tool_error","operator_feedback"], "on_detect": "add_rule" }, "rule_updates": [], "noise_learning": { "ingest_noise_log": true, "threshold": 3, "action": "propose_rule" }, "changelog_ref": "#/changelog", "rollback": { "enabled": true, "strategy": "last_good" } } },
        { "id": "step-3-formalize-json-schema", "title": "Formalize JSON Schema", "goal": "Strict schema for each PB2S cycle; enforced every iteration.", "actions": ["Author schema","Attach to validation_schema","Enable strict validation","Auto-repeat on fail"], "constraints": ["Cycles conform to pb2s_cycle_schema","Validation every iteration","No egress unless validation_passed"] },
        { "id": "step-4-trial-room", "title": "Build the Trial Room (Sandbox Execution)", "goal": "Permanent Docker/Podman sandbox; local API only; all traffic via Suit; optional DB for audits.", "actions": ["Provision sandbox","Run llm-backend and suit-engine","Bind APIs to 127.0.0.1","Route all requests through Suit","Persist audit logs"], "constraints": ["No external exposure beyond localhost","All interactions traverse Suit","Audit logging when DB enabled"], "runtime": { "orchestrator": "docker", "expose_only_local_api": true, "network_mode": "bridge", "services": [ { "name": "llm", "type": "llm-backend", "image": "ollama/ollama:latest", "ports": [ { "host": "127.0.0.1:11434", "container": 11434 } ] }, { "name": "suit", "type": "suit-engine", "image": "suit/engine:latest", "depends_on": ["llm"], "ports": [ { "host": "127.0.0.1:8080", "container": 8080 } ] } ], "database": { "enabled": true, "engine": "postgres", "dsn": "postgres://user:pass@127.0.0.1:5432/pb2s" }, "policy": { "force_suit_path": true, "deny_external_egress": true } }, "verification": ["Only 127.0.0.1 is listening","Direct LLM calls bypass are denied","Each PB2S cycle creates an audit row"] },
        { "id": "step-5-continuous-adaptation", "title": "Continuous Adaptation Loop", "goal": "Continuously learn from contradictions and noise; upgrade rules and schemas; keep auditability.", "actions": ["Collect signals from validation failures and noise_log","Attribute responsibility","Generate proposed rule changes","Apply safe self-updates to schema/validator/PB2S","Record changelog; support rollback"], "constraints": ["Self-updates occur inside sandbox","All changes are versioned and auditable","Rollback path is defined"], "verification": ["Contradictions create rule_change entries","New rules reduce recurrent noise patterns","Rollback restores last_good state without data loss"] }
      ]
    }
  ]
}
